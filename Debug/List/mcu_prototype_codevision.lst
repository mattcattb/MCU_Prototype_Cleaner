
AVRASM ver. 2.1.30  C:\Users\agent\Desktop\MCU_Prototype_Cleaner\Debug\List\mcu_prototype_codevision.asm Tue Jan 02 17:11:18 2024

C:\Users\agent\Desktop\MCU_Prototype_Cleaner\Debug\List\mcu_prototype_codevision.asm(1421): warning: Register r3 already defined by the .DEF directive
C:\Users\agent\Desktop\MCU_Prototype_Cleaner\Debug\List\mcu_prototype_codevision.asm(1422): warning: Register r4 already defined by the .DEF directive
C:\Users\agent\Desktop\MCU_Prototype_Cleaner\Debug\List\mcu_prototype_codevision.asm(1423): warning: Register r5 already defined by the .DEF directive
C:\Users\agent\Desktop\MCU_Prototype_Cleaner\Debug\List\mcu_prototype_codevision.asm(1424): warning: Register r6 already defined by the .DEF directive
C:\Users\agent\Desktop\MCU_Prototype_Cleaner\Debug\List\mcu_prototype_codevision.asm(1425): warning: Register r8 already defined by the .DEF directive
C:\Users\agent\Desktop\MCU_Prototype_Cleaner\Debug\List\mcu_prototype_codevision.asm(1426): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V4.00a 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _InPout150V=R3
                 	.DEF _InPout150V_msb=R4
                 	.DEF _FreeCount=R5
                 	.DEF _FreeCount_msb=R6
                 	.DEF _error_state=R8
                 	.DEF _DISPLAY_Counter=R7
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0058 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 00de 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0100      	.DB  0x0,0x1
                 
                 _0x38:
000037 063f
000038 4f5b
000039 6d66
00003a 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00003b 6f7f
00003c 3900
00003d 7873
00003e 3f5c      	.DB  0x7F,0x6F,0x0,0x39,0x73,0x78,0x5C,0x3F
00003f 7137
000040 796e
000041 3850
000042 4054      	.DB  0x37,0x71,0x6E,0x79,0x50,0x38,0x54,0x40
000043 1c76
000044 773e
000045 ff6d
000046 86bf      	.DB  0x76,0x1C,0x3E,0x77,0x6D,0xFF,0xBF,0x86
000047 cfdb
000048 ede6
000049 87fd
00004a efff      	.DB  0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF
00004b 553f
00004c 5367
00004d 8020
00004e 5e7c      	.DB  0x3F,0x55,0x67,0x53,0x20,0x80,0x7C,0x5E
00004f 106a
C:\Users\agent\Desktop\MCU_Prototype_Cleaner\Debug\List\mcu_prototype_codevision.asm(1477): warning: .cseg .db misalignment - padding zero byte
000050 0063      	.DB  0x6A,0x10,0x63
                 
                 __GLOBAL_INI_TBL:
000051 0006      	.DW  0x06
000052 0003      	.DW  0x03
000053 0068      	.DW  __REG_VARS*2
                 
000054 0033      	.DW  0x33
000055 0308      	.DW  _SegmentData
000056 006e      	.DW  _0x38*2
                 
                 _0xFFFFFFFF:
000057 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000058 94f8      	CLI
                 
000059 27ee      	CLR  R30
00005a bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005b e0f1      	LDI  R31,1
00005c bff5      	OUT  MCUCR,R31
00005d bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00005e e08d      	LDI  R24,(14-2)+1
00005f e0a2      	LDI  R26,2
000060 27bb      	CLR  R27
                 __CLEAR_REG:
000061 93ed      	ST   X+,R30
000062 958a      	DEC  R24
000063 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000064 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000065 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000066 e0a0      	LDI  R26,LOW(__SRAM_START)
000067 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000068 93ed      	ST   X+,R30
000069 9701      	SBIW R24,1
00006a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006b eae2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006d 9185      	LPM  R24,Z+
00006e 9195      	LPM  R25,Z+
00006f 9700      	SBIW R24,0
000070 f061      	BREQ __GLOBAL_INI_END
000071 91a5      	LPM  R26,Z+
000072 91b5      	LPM  R27,Z+
000073 9005      	LPM  R0,Z+
000074 9015      	LPM  R1,Z+
000075 01bf      	MOVW R22,R30
000076 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000077 9005      	LPM  R0,Z+
000078 920d      	ST   X+,R0
000079 9701      	SBIW R24,1
00007a f7e1      	BRNE __GLOBAL_INI_LOOP
00007b 01fb      	MOVW R30,R22
00007c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00007d e0e0      	LDI  R30,__GPIOR0_INIT
00007e bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007f efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000080 bfed      	OUT  SPL,R30
000081 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000082 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000083 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000084 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000085 940c 0168 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ; 0000 0021 {
                 
                 	.CSEG
                 _Motor_R_L_Off:
                 ; .FSTART _Motor_R_L_Off
000087 931a      	ST   -Y,R17
000088 2f1a      	MOV  R17,R26
                 ;	Motor -> R17
000089 3011      	CPI  R17,1
00008a f421      	BRNE _0x3
00008b 9844      	CBI  0x8,4
00008c 9a43      	SBI  0x8,3
00008d 9a45      	SBI  0x8,5
00008e c009      	RJMP _0xA
                 _0x3:
00008f 3012      	CPI  R17,2
000090 f421      	BRNE _0xB
000091 9a44      	SBI  0x8,4
000092 9843      	CBI  0x8,3
000093 9a45      	SBI  0x8,5
000094 c003      	RJMP _0x12
                 _0xB:
000095 9844      	CBI  0x8,4
000096 9843      	CBI  0x8,3
000097 9845      	CBI  0x8,5
                 _0x12:
                 _0xA:
000098 c043      	RJMP _0x2000002
                 ; .FEND
                 _get_motor_state:
                 ; .FSTART _get_motor_state
000099 9b44      	SBIS 0x8,4
00009a c002      	RJMP _0x1A
00009b 9b43      	SBIS 0x8,3
00009c c001      	RJMP _0x1B
                 _0x1A:
00009d c003      	RJMP _0x19
                 _0x1B:
00009e e0e2      	LDI  R30,LOW(2)
00009f e0f0      	LDI  R31,HIGH(2)
0000a0 9508      	RET
                 _0x19:
0000a1 9944      	SBIC 0x8,4
0000a2 c002      	RJMP _0x1E
0000a3 9943      	SBIC 0x8,3
0000a4 c001      	RJMP _0x1F
                 _0x1E:
0000a5 c003      	RJMP _0x1D
                 _0x1F:
0000a6 e0e1      	LDI  R30,LOW(1)
0000a7 e0f0      	LDI  R31,HIGH(1)
0000a8 9508      	RET
                 _0x1D:
0000a9 e0e0      	LDI  R30,LOW(0)
0000aa e0f0      	LDI  R31,HIGH(0)
0000ab 9508      	RET
0000ac 9508      	RET
                 ; .FEND
                 _control_LED:
                 ; .FSTART _control_LED
0000ad 931a      	ST   -Y,R17
0000ae 930a      	ST   -Y,R16
0000af 2f1a      	MOV  R17,R26
0000b0 810a      	LDD  R16,Y+2
                 ;	Led1 -> R16
                 ;	Led2 -> R17
0000b1 3001      	CPI  R16,1
0000b2 f411      	BRNE _0x21
0000b3 9a2b      	SBI  0x5,3
0000b4 c001      	RJMP _0x24
                 _0x21:
0000b5 982b      	CBI  0x5,3
                 _0x24:
0000b6 3011      	CPI  R17,1
0000b7 f411      	BRNE _0x27
0000b8 9a2c      	SBI  0x5,4
0000b9 c001      	RJMP _0x2A
                 _0x27:
0000ba 982c      	CBI  0x5,4
                 _0x2A:
0000bb 9a2d      	SBI  0x5,5
0000bc 9a42      	SBI  0x8,2
0000bd 8119      	LDD  R17,Y+1
0000be 8108      	LDD  R16,Y+0
0000bf 9623      	ADIW R28,3
0000c0 9508      	RET
                 ; .FEND
                 _read_adc:
                 ; .FSTART _read_adc
0000c1 931a      	ST   -Y,R17
0000c2 2f1a      	MOV  R17,R26
                 ;	adc_input -> R17
0000c3 2fe1      	MOV  R30,R17
0000c4 6ce0      	ORI  R30,LOW(0xC0)
0000c5 93e0 007c 	STS  124,R30
                +
0000c7 e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
0000c8 958a     +DEC R24
0000c9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
0000ca 91e0 007a 	LDS  R30,122
0000cc 64e0      	ORI  R30,0x40
0000cd 93e0 007a 	STS  122,R30
                 _0x31:
0000cf 91e0 007a 	LDS  R30,122
0000d1 71e0      	ANDI R30,LOW(0x10)
0000d2 f3e1      	BREQ _0x31
0000d3 91e0 007a 	LDS  R30,122
0000d5 61e0      	ORI  R30,0x10
0000d6 93e0 007a 	STS  122,R30
0000d8 91e0 0078 	LDS  R30,120
0000da 91f0 0079 	LDS  R31,120+1
                 _0x2000002:
0000dc 9119      	LD   R17,Y+
0000dd 9508      	RET
                 ; .FEND
                 ;	scale_m -> Y+8
                 ;	scale_b -> Y+4
                 ;	vin -> Y+0
                 ;	n -> R18,R19
                 ;	sum_vin -> Y+4
                 ;	i -> R16,R17
                 ;	max_current -> Y+12
                 ;	max_voltage -> Y+8
                 ;	current -> Y+4
                 ;	sense_voltage -> Y+0
                 ;void motor_loop(float In150V_Val);
                 ;void Show_Value (unsigned int In);
                 ;void steady_voltage();
                 ;void check_error_state();
                 ;void TEST_show_value(unsigned int In);
                 
                 	.DSEG
                 ;interrupt [17] void timer0_ovf_isr(void)
                 ; 0000 0047 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0000de 920a      	ST   -Y,R0
0000df 921a      	ST   -Y,R1
0000e0 92fa      	ST   -Y,R15
0000e1 936a      	ST   -Y,R22
0000e2 937a      	ST   -Y,R23
0000e3 938a      	ST   -Y,R24
0000e4 939a      	ST   -Y,R25
0000e5 93aa      	ST   -Y,R26
0000e6 93ba      	ST   -Y,R27
0000e7 93ea      	ST   -Y,R30
0000e8 93fa      	ST   -Y,R31
0000e9 b7ef      	IN   R30,SREG
0000ea 93ea      	ST   -Y,R30
                 ; 0000 0048 float n = 300;
                 ; 0000 0049 unsigned char dot_mask = 0b10000000;
                 ; 0000 004A // here display 1 of the digits and add to the sum to calculate the average over 300 readings
                 ; 0000 004B Seg1 = 1;
0000eb d17d      	RCALL SUBOPT_0x0
0000ec e9e6      	LDI  R30,LOW(150)
0000ed 83ea      	STD  Y+2,R30
0000ee e4e3      	LDI  R30,LOW(67)
0000ef 83eb      	STD  Y+3,R30
0000f0 931a      	ST   -Y,R17
                 ;	n -> Y+1
                 ;	dot_mask -> R17
0000f1 e810      	LDI  R17,128
0000f2 9a28      	SBI  0x5,0
                 ; 0000 004C Seg2 = 1;
0000f3 9a29      	SBI  0x5,1
                 ; 0000 004D Seg3 = 1;
0000f4 9a2a      	SBI  0x5,2
                 ; 0000 004E 
                 ; 0000 004F if(DISPLAY_Counter == 0)
0000f5 2077      	TST  R7
0000f6 f469      	BRNE _0x3F
                 ; 0000 0050 {
                 ; 0000 0051 SegData = SegmentData[DISPLAY[1]];
                +
0000f7 91e0 0305+LDS R30 , _DISPLAY + ( 1 )
                 	__GETB1MN _DISPLAY,1
0000f9 d174      	RCALL SUBOPT_0x1
                 ; 0000 0052 
                 ; 0000 0053 // mask data to turn on dot if error code suggests it
                 ; 0000 0054 if (((error_state >> 2) & 0b001) == 0b001){
0000fa d1ad      	RCALL __ASRW2
0000fb 70e1      	ANDI R30,LOW(0x1)
0000fc 30e1      	CPI  R30,LOW(0x1)
0000fd f419      	BRNE _0x40
                 ; 0000 0055 SegData = SegData | dot_mask;
0000fe b1eb      	IN   R30,0xB
0000ff 2be1      	OR   R30,R17
000100 b9eb      	OUT  0xB,R30
                 ; 0000 0056 }
                 ; 0000 0057 
                 ; 0000 0058 DISPLAY_Counter++;
                 _0x40:
000101 9473      	INC  R7
                 ; 0000 0059 Seg3 = 0;
000102 982a      	CBI  0x5,2
                 ; 0000 005A }
                 ; 0000 005B else if( DISPLAY_Counter == 1)
000103 c01c      	RJMP _0x43
                 _0x3F:
000104 e0e1      	LDI  R30,LOW(1)
000105 15e7      	CP   R30,R7
000106 f471      	BRNE _0x44
                 ; 0000 005C {
                 ; 0000 005D SegData = SegmentData[DISPLAY[2]];
                +
000107 91e0 0306+LDS R30 , _DISPLAY + ( 2 )
                 	__GETB1MN _DISPLAY,2
000109 d164      	RCALL SUBOPT_0x1
                 ; 0000 005E 
                 ; 0000 005F if (((error_state >> 1) & 0b001) == 0b001){
00010a 95f5      	ASR  R31
00010b 95e7      	ROR  R30
00010c 70e1      	ANDI R30,LOW(0x1)
00010d 30e1      	CPI  R30,LOW(0x1)
00010e f419      	BRNE _0x45
                 ; 0000 0060 SegData = SegData | dot_mask;
00010f b1eb      	IN   R30,0xB
000110 2be1      	OR   R30,R17
000111 b9eb      	OUT  0xB,R30
                 ; 0000 0061 }
                 ; 0000 0062 
                 ; 0000 0063 DISPLAY_Counter++;
                 _0x45:
000112 9473      	INC  R7
                 ; 0000 0064 Seg2 = 0;
000113 9829      	CBI  0x5,1
                 ; 0000 0065 }
                 ; 0000 0066 else
000114 c00b      	RJMP _0x48
                 _0x44:
                 ; 0000 0067 {
                 ; 0000 0068 SegData = SegmentData[DISPLAY[3]];
                +
000115 91e0 0307+LDS R30 , _DISPLAY + ( 3 )
                 	__GETB1MN _DISPLAY,3
000117 d156      	RCALL SUBOPT_0x1
                 ; 0000 0069 
                 ; 0000 006A 
                 ; 0000 006B if (((error_state >> 0) & 0b001) == 0b001){
000118 70e1      	ANDI R30,LOW(0x1)
000119 30e1      	CPI  R30,LOW(0x1)
00011a f419      	BRNE _0x49
                 ; 0000 006C SegData = SegData | dot_mask;
00011b b1eb      	IN   R30,0xB
00011c 2be1      	OR   R30,R17
00011d b9eb      	OUT  0xB,R30
                 ; 0000 006D }
                 ; 0000 006E 
                 ; 0000 006F DISPLAY_Counter = 0;
                 _0x49:
00011e 2477      	CLR  R7
                 ; 0000 0070 Seg1 = 0;
00011f 9828      	CBI  0x5,0
                 ; 0000 0071 }
                 _0x48:
                 _0x43:
                 ; 0000 0072 
                 ; 0000 0073 // this should properly scale between 100-200 volts
                 ; 0000 0074 AveInPout150V += (((read_adc(Sens150Vin)*100.0)/1024.0) + 100);
000120 e0a0      	LDI  R26,0
000121 9940      	SBIC 0x8,0
000122 e0a1      	LDI  R26,1
000123 df9d      	RCALL _read_adc
000124 d151      	RCALL SUBOPT_0x2
000125 d154      	RCALL SUBOPT_0x3
000126 d29b      	RCALL __MULF12
000127 01df      	MOVW R26,R30
000128 01cb      	MOVW R24,R22
                +
000129 e0e0     +LDI R30 , LOW ( 0x44800000 )
00012a e0f0     +LDI R31 , HIGH ( 0x44800000 )
00012b e860     +LDI R22 , BYTE3 ( 0x44800000 )
00012c e474     +LDI R23 , BYTE4 ( 0x44800000 )
                 	__GETD1N 0x44800000
00012d d2e2      	RCALL __DIVF21
00012e d14b      	RCALL SUBOPT_0x3
00012f d243      	RCALL __ADDF12
000130 d14e      	RCALL SUBOPT_0x4
000131 d241      	RCALL __ADDF12
000132 93e0 0300 	STS  _AveInPout150V,R30
000134 93f0 0301 	STS  _AveInPout150V+1,R31
000136 9360 0302 	STS  _AveInPout150V+2,R22
000138 9370 0303 	STS  _AveInPout150V+3,R23
                 ; 0000 0075 
                 ; 0000 0076 
                 ; 0000 0077 if(FreeCount++ >= n)
                +
00013a 2de5     +MOV R30 , R5
00013b 2df6     +MOV R31 , R6
                 	__GETW1R 5,6
00013c 9631      	ADIW R30,1
                +
00013d 2e5e     +MOV R5 , R30
00013e 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
00013f 9731      	SBIW R30,1
000140 01df      	MOVW R26,R30
000141 d147      	RCALL SUBOPT_0x5
000142 2788      	CLR  R24
000143 2799      	CLR  R25
000144 d185      	RCALL __CDF2
000145 d30e      	RCALL __CMPF12
000146 f088      	BRLO _0x4C
                 ; 0000 0078 {
                 ; 0000 0079 // calculate average once n readings have been reached
                 ; 0000 007A FreeCount = 0;
000147 2455      	CLR  R5
000148 2466      	CLR  R6
                 ; 0000 007B InPout150V = (AveInPout150V/n);
000149 d13f      	RCALL SUBOPT_0x5
00014a d134      	RCALL SUBOPT_0x4
00014b d2c4      	RCALL __DIVF21
00014c d1ba      	RCALL __CFD1U
                +
00014d 2e3e     +MOV R3 , R30
00014e 2e4f     +MOV R4 , R31
                 	__PUTW1R 3,4
                 ; 0000 007C AveInPout150V=0;
00014f e0e0      	LDI  R30,LOW(0)
000150 93e0 0300 	STS  _AveInPout150V,R30
000152 93e0 0301 	STS  _AveInPout150V+1,R30
000154 93e0 0302 	STS  _AveInPout150V+2,R30
000156 93e0 0303 	STS  _AveInPout150V+3,R30
                 ; 0000 007D }
                 ; 0000 007E 
                 ; 0000 007F }
                 _0x4C:
000158 8118      	LDD  R17,Y+0
000159 9625      	ADIW R28,5
00015a 91e9      	LD   R30,Y+
00015b bfef      	OUT  SREG,R30
00015c 91f9      	LD   R31,Y+
00015d 91e9      	LD   R30,Y+
00015e 91b9      	LD   R27,Y+
00015f 91a9      	LD   R26,Y+
000160 9199      	LD   R25,Y+
000161 9189      	LD   R24,Y+
000162 9179      	LD   R23,Y+
000163 9169      	LD   R22,Y+
000164 90f9      	LD   R15,Y+
000165 9019      	LD   R1,Y+
000166 9009      	LD   R0,Y+
000167 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0082 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0083 float temp_val;
                 ; 0000 0084 #include <Init.c>
000168 9724      	SBIW R28,4
                 ;	temp_val -> Y+0
000169 e8e0      	LDI  R30,LOW(128)
00016a 93e0 0061 	STS  97,R30
00016c e0e0      	LDI  R30,LOW(0)
00016d 93e0 0061 	STS  97,R30
00016f e3ef      	LDI  R30,LOW(63)
000170 b9e4      	OUT  0x4,R30
000171 e0e7      	LDI  R30,LOW(7)
000172 b9e5      	OUT  0x5,R30
000173 e3ec      	LDI  R30,LOW(60)
000174 b9e7      	OUT  0x7,R30
000175 e0e0      	LDI  R30,LOW(0)
000176 b9e8      	OUT  0x8,R30
000177 efef      	LDI  R30,LOW(255)
000178 b9ea      	OUT  0xA,R30
000179 e0e0      	LDI  R30,LOW(0)
00017a b9eb      	OUT  0xB,R30
00017b bde4      	OUT  0x24,R30
00017c e0e3      	LDI  R30,LOW(3)
00017d bde5      	OUT  0x25,R30
00017e e0e0      	LDI  R30,LOW(0)
00017f bde6      	OUT  0x26,R30
000180 bde7      	OUT  0x27,R30
000181 bde8      	OUT  0x28,R30
000182 93e0 0080 	STS  128,R30
000184 93e0 0081 	STS  129,R30
000186 93e0 0085 	STS  133,R30
000188 93e0 0084 	STS  132,R30
00018a 93e0 0087 	STS  135,R30
00018c 93e0 0086 	STS  134,R30
00018e 93e0 0089 	STS  137,R30
000190 93e0 0088 	STS  136,R30
000192 93e0 008b 	STS  139,R30
000194 93e0 008a 	STS  138,R30
000196 93e0 00b6 	STS  182,R30
000198 93e0 00b0 	STS  176,R30
00019a 93e0 00b1 	STS  177,R30
00019c 93e0 00b2 	STS  178,R30
00019e 93e0 00b3 	STS  179,R30
0001a0 93e0 00b4 	STS  180,R30
0001a2 e0e1      	LDI  R30,LOW(1)
0001a3 93e0 006e 	STS  110,R30
0001a5 e0e0      	LDI  R30,LOW(0)
0001a6 93e0 006f 	STS  111,R30
0001a8 93e0 0070 	STS  112,R30
0001aa 93e0 0069 	STS  105,R30
0001ac bbed      	OUT  0x1D,R30
0001ad 93e0 0068 	STS  104,R30
0001af 93e0 00c1 	STS  193,R30
0001b1 e8e0      	LDI  R30,LOW(128)
0001b2 bfe0      	OUT  0x30,R30
0001b3 e0e0      	LDI  R30,LOW(0)
0001b4 93e0 007f 	STS  127,R30
0001b6 e8e4      	LDI  R30,LOW(132)
0001b7 93e0 007a 	STS  122,R30
0001b9 e0e0      	LDI  R30,LOW(0)
0001ba 93e0 007b 	STS  123,R30
0001bc 93e0 007e 	STS  126,R30
0001be bdec      	OUT  0x2C,R30
0001bf 93e0 00bc 	STS  188,R30
0001c1 9478      	SEI
                 ; 0000 0085 
                 ; 0000 0086 delay_ms(5*1000);
0001c2 e8a8      	LDI  R26,LOW(5000)
0001c3 e1b3      	LDI  R27,HIGH(5000)
0001c4 d2af      	RCALL _delay_ms
                 ; 0000 0087 
                 ; 0000 0088 // turn both LEDs on
                 ; 0000 0089 control_LED(ON, ON);
0001c5 e0e1      	LDI  R30,LOW(1)
0001c6 93ea      	ST   -Y,R30
0001c7 e0a1      	LDI  R26,LOW(1)
0001c8 dee4      	RCALL _control_LED
                 ; 0000 008A 
                 ; 0000 008B // wait for first voltage to be between 140 and 160
                 ; 0000 008C steady_voltage();
0001c9 d01f      	RCALL _steady_voltage
                 ; 0000 008D 
                 ; 0000 008E // set both drivers low and enable on
                 ; 0000 008F M_D_R = 0;
0001ca 9843      	CBI  0x8,3
                 ; 0000 0090 M_D_L = 0;
0001cb 9844      	CBI  0x8,4
                 ; 0000 0091 M_EN = 0;
0001cc 9845      	CBI  0x8,5
                 ; 0000 0092 
                 ; 0000 0093 while (1)
                 _0x53:
                 ; 0000 0094 {
                 ; 0000 0095 
                 ; 0000 0096 check_error_state();
0001cd d00b      	RCALL _check_error_state
                 ; 0000 0097 
                 ; 0000 0098 //! make this more accurate!
                 ; 0000 0099 // temp_val = (((read_adc(Sens150Vin)*100.0)/1024.0) + 100);
                 ; 0000 009A 
                 ; 0000 009B // set value to be shown on 7-seg display
                 ; 0000 009C //! SWITCH TO SHOW VOLTAGE VALUE !!!
                 ; 0000 009D Show_Value(InPout150V);
                +
0001ce 2da3     +MOV R26 , R3
0001cf 2db4     +MOV R27 , R4
                 	__GETW2R 3,4
0001d0 d02d      	RCALL _Show_Value
                 ; 0000 009E 
                 ; 0000 009F // control motor based on reading
                 ; 0000 00A0 motor_loop(InPout150V);
                +
0001d1 2de3     +MOV R30 , R3
0001d2 2df4     +MOV R31 , R4
                 	__GETW1R 3,4
0001d3 d0a2      	RCALL SUBOPT_0x2
0001d4 01df      	MOVW R26,R30
0001d5 01cb      	MOVW R24,R22
0001d6 d04b      	RCALL _motor_loop
                 ; 0000 00A1 
                 ; 0000 00A2 //! add droop compensation here!
                 ; 0000 00A3 
                 ; 0000 00A4 }
0001d7 cff5      	RJMP _0x53
                 ; 0000 00A5 }
                 _0x56:
0001d8 cfff      	RJMP _0x56
                 ; .FEND
                 ;void check_error_state(){
                 ; 0000 00A8 void check_error_state(){
                 _check_error_state:
                 ; .FSTART _check_error_state
                 ; 0000 00A9 // make changes to error state
                 ; 0000 00AA 
                 ; 0000 00AB if (InPout150V < 132 && (get_motor_state() == Down))
0001d9 e8e4      	LDI  R30,LOW(132)
0001da e0f0      	LDI  R31,HIGH(132)
0001db 163e      	CP   R3,R30
0001dc 064f      	CPC  R4,R31
0001dd f428      	BRSH _0x58
0001de deba      	RCALL _get_motor_state
0001df 30e2      	CPI  R30,LOW(0x2)
0001e0 e0a0      	LDI  R26,HIGH(0x2)
0001e1 07fa      	CPC  R31,R26
0001e2 f009      	BREQ _0x59
                 _0x58:
0001e3 c003      	RJMP _0x57
                 _0x59:
                 ; 0000 00AC {
                 ; 0000 00AD // voltage below 132V, and lift lowering
                 ; 0000 00AE error_state = 2;
0001e4 e0e2      	LDI  R30,LOW(2)
0001e5 2e8e      	MOV  R8,R30
                 ; 0000 00AF }else
0001e6 c001      	RJMP _0x5A
                 _0x57:
                 ; 0000 00B0 {
                 ; 0000 00B1 // no error state
                 ; 0000 00B2 error_state = 0;
0001e7 2488      	CLR  R8
                 ; 0000 00B3 }
                 _0x5A:
                 ; 0000 00B4 }
0001e8 9508      	RET
                 ; .FEND
                 ;void steady_voltage()
                 ; 0000 00B7 {
                 _steady_voltage:
                 ; .FSTART _steady_voltage
                 ; 0000 00B8 // wait for voltage to steady out to being between 160 and 140
                 ; 0000 00B9 error_state = 4;
0001e9 e0e4      	LDI  R30,LOW(4)
0001ea 2e8e      	MOV  R8,R30
                 ; 0000 00BA while(InPout150V>160 || InPout150V < 140){
                 _0x5B:
0001eb eae0      	LDI  R30,LOW(160)
0001ec e0f0      	LDI  R31,HIGH(160)
0001ed 15e3      	CP   R30,R3
0001ee 05f4      	CPC  R31,R4
0001ef f028      	BRLO _0x5E
0001f0 e8ec      	LDI  R30,LOW(140)
0001f1 e0f0      	LDI  R31,HIGH(140)
0001f2 163e      	CP   R3,R30
0001f3 064f      	CPC  R4,R31
0001f4 f438      	BRSH _0x5D
                 _0x5E:
                 ; 0000 00BB // keep waiting while greater then 160 or less then 140
                 ; 0000 00BC Show_Value(InPout150V);
                +
0001f5 2da3     +MOV R26 , R3
0001f6 2db4     +MOV R27 , R4
                 	__GETW2R 3,4
0001f7 d006      	RCALL _Show_Value
                 ; 0000 00BD delay_ms(2);
0001f8 e0a2      	LDI  R26,LOW(2)
0001f9 e0b0      	LDI  R27,0
0001fa d279      	RCALL _delay_ms
                 ; 0000 00BE }
0001fb cfef      	RJMP _0x5B
                 _0x5D:
                 ; 0000 00BF // finally, should be between 160 and 140 so return
                 ; 0000 00C0 error_state = 0;
0001fc 2488      	CLR  R8
                 ; 0000 00C1 return;
0001fd 9508      	RET
                 ; 0000 00C2 }
                 ; .FEND
                 ;void TEST_show_value(unsigned int In)
                 ; 0000 00C5 {
                 ; 0000 00C6 // display integer on 3 digit 7-segment display
                 ; 0000 00C7 DISPLAY[1] = ((In / 100) % 10);
                 ;	In -> R16,R17
                 ; 0000 00C8 DISPLAY[2] = ((In / 10) % 10);
                 ; 0000 00C9 DISPLAY[3] = ((In / 1) % 10);
                 ; 0000 00CA 
                 ; 0000 00CB }
                 ;void Show_Value (unsigned int In)
                 ; 0000 00CE {
                 _Show_Value:
                 ; .FSTART _Show_Value
                 ; 0000 00CF // display integer on 3 digit 7-segment display
                 ; 0000 00D0 if(InPout150V <= 100)
0001fe 931a      	ST   -Y,R17
0001ff 930a      	ST   -Y,R16
000200 018d      	MOVW R16,R26
                 ;	In -> R16,R17
000201 e6e4      	LDI  R30,LOW(100)
000202 e0f0      	LDI  R31,HIGH(100)
000203 15e3      	CP   R30,R3
000204 05f4      	CPC  R31,R4
000205 f038      	BRLO _0x60
                 ; 0000 00D1 {
                 ; 0000 00D2 DISPLAY[1] = 19;//Err
000206 e1e3      	LDI  R30,LOW(19)
                +
000207 93e0 0305+STS _DISPLAY + ( 1 ) , R30
                 	__PUTB1MN _DISPLAY,1
                 ; 0000 00D3 DISPLAY[2] = 20;
000209 e1e4      	LDI  R30,LOW(20)
                +
00020a 93e0 0306+STS _DISPLAY + ( 2 ) , R30
                 	__PUTB1MN _DISPLAY,2
                 ; 0000 00D4 DISPLAY[3] = 20;
00020c c010      	RJMP _0x6D
                 ; 0000 00D5 }
                 ; 0000 00D6 else
                 _0x60:
                 ; 0000 00D7 {
                 ; 0000 00D8 DISPLAY[1] = ((In / 100) % 10);
00020d 01d8      	MOVW R26,R16
00020e e6e4      	LDI  R30,LOW(100)
00020f e0f0      	LDI  R31,HIGH(100)
000210 d07d      	RCALL SUBOPT_0x6
                +
000211 93e0 0305+STS _DISPLAY + ( 1 ) , R30
                 	__PUTB1MN _DISPLAY,1
                 ; 0000 00D9 DISPLAY[2] = ((In / 10) % 10);
000213 01d8      	MOVW R26,R16
000214 e0ea      	LDI  R30,LOW(10)
000215 e0f0      	LDI  R31,HIGH(10)
000216 d077      	RCALL SUBOPT_0x6
                +
000217 93e0 0306+STS _DISPLAY + ( 2 ) , R30
                 	__PUTB1MN _DISPLAY,2
                 ; 0000 00DA DISPLAY[3] = ((In / 1) % 10);
000219 01d8      	MOVW R26,R16
00021a e0ea      	LDI  R30,LOW(10)
00021b e0f0      	LDI  R31,HIGH(10)
00021c d0a3      	RCALL __MODW21U
                 _0x6D:
                +
00021d 93e0 0307+STS _DISPLAY + ( 3 ) , R30
                 	__PUTB1MN _DISPLAY,3
                 ; 0000 00DB }
                 ; 0000 00DC }
00021f 9109      	LD   R16,Y+
000220 9119      	LD   R17,Y+
000221 9508      	RET
                 ; .FEND
                 ;void motor_loop(float In150V_Val)
                 ; 0000 00DF {
                 _motor_loop:
                 ; .FSTART _motor_loop
                 ; 0000 00E0 //! make this have latch functionality
                 ; 0000 00E1 
                 ; 0000 00E2 float latch_val = 150;
                 ; 0000 00E3 
                 ; 0000 00E4 // if voltage > 160, go up
                 ; 0000 00E5 if(In150V_Val > 160)
000222 d0a0      	RCALL __PUTPARD2
000223 d045      	RCALL SUBOPT_0x0
000224 e1e6      	LDI  R30,LOW(22)
000225 83ea      	STD  Y+2,R30
000226 e4e3      	LDI  R30,LOW(67)
000227 83eb      	STD  Y+3,R30
                 ;	In150V_Val -> Y+4
                 ;	latch_val -> Y+0
000228 d06b      	RCALL SUBOPT_0x7
                +
000229 e0e0     +LDI R30 , LOW ( 0x43200000 )
00022a e0f0     +LDI R31 , HIGH ( 0x43200000 )
00022b e260     +LDI R22 , BYTE3 ( 0x43200000 )
00022c e473     +LDI R23 , BYTE4 ( 0x43200000 )
                 	__GETD1N 0x43200000
00022d d226      	RCALL __CMPF12
00022e f009      	BREQ PC+2
00022f f408      	BRCC PC+2
000230 c003      	RJMP _0x62
                 ; 0000 00E6 {
                 ; 0000 00E7 // lift UP
                 ; 0000 00E8 Motor_R_L_Off(Right);// Right Left OFF
000231 e0a1      	LDI  R26,LOW(1)
000232 de54      	RCALL _Motor_R_L_Off
                 ; 0000 00E9 
                 ; 0000 00EA return;
000233 c033      	RJMP _0x2000001
                 ; 0000 00EB }
                 ; 0000 00EC 
                 ; 0000 00ED // if voltage between 140,105 go down
                 ; 0000 00EE if((In150V_Val < 140) && (In150V_Val > 105))
                 _0x62:
000234 d05f      	RCALL SUBOPT_0x7
                +
000235 e0e0     +LDI R30 , LOW ( 0x430C0000 )
000236 e0f0     +LDI R31 , HIGH ( 0x430C0000 )
000237 e06c     +LDI R22 , BYTE3 ( 0x430C0000 )
000238 e473     +LDI R23 , BYTE4 ( 0x430C0000 )
                 	__GETD1N 0x430C0000
000239 d21a      	RCALL __CMPF12
00023a f450      	BRSH _0x64
00023b d058      	RCALL SUBOPT_0x7
                +
00023c e0e0     +LDI R30 , LOW ( 0x42D20000 )
00023d e0f0     +LDI R31 , HIGH ( 0x42D20000 )
00023e ed62     +LDI R22 , BYTE3 ( 0x42D20000 )
00023f e472     +LDI R23 , BYTE4 ( 0x42D20000 )
                 	__GETD1N 0x42D20000
000240 d213      	RCALL __CMPF12
000241 f009      	BREQ PC+2
000242 f408      	BRCC PC+2
000243 c001      	RJMP _0x64
000244 c001      	RJMP _0x65
                 _0x64:
000245 c00e      	RJMP _0x63
                 _0x65:
                 ; 0000 00EF {
                 ; 0000 00F0 // lift DOWN
                 ; 0000 00F1 Motor_R_L_Off(Left);// Right Left OFF
000246 e0a2      	LDI  R26,LOW(2)
000247 de3f      	RCALL _Motor_R_L_Off
                 ; 0000 00F2 
                 ; 0000 00F3 if (In150V_Val < 132){
000248 d04b      	RCALL SUBOPT_0x7
                +
000249 e0e0     +LDI R30 , LOW ( 0x43040000 )
00024a e0f0     +LDI R31 , HIGH ( 0x43040000 )
00024b e064     +LDI R22 , BYTE3 ( 0x43040000 )
00024c e473     +LDI R23 , BYTE4 ( 0x43040000 )
                 	__GETD1N 0x43040000
00024d d206      	RCALL __CMPF12
00024e f420      	BRSH _0x66
                 ; 0000 00F4 // turn off one headlamp until lift stops moving
                 ; 0000 00F5 control_LED(ON, OFF);
00024f e0e1      	LDI  R30,LOW(1)
000250 93ea      	ST   -Y,R30
000251 e0a0      	LDI  R26,LOW(0)
000252 de5a      	RCALL _control_LED
                 ; 0000 00F6 }
                 ; 0000 00F7 return;
                 _0x66:
000253 c013      	RJMP _0x2000001
                 ; 0000 00F8 }
                 ; 0000 00F9 
                 ; 0000 00FA if (get_motor_state() == Up && (In150V_Val < latch_val)){
                 _0x63:
000254 de44      	RCALL _get_motor_state
000255 9731      	SBIW R30,1
000256 f411      	BRNE _0x68
000257 d041      	RCALL SUBOPT_0x8
000258 f008      	BRLO _0x69
                 _0x68:
000259 c002      	RJMP _0x67
                 _0x69:
                 ; 0000 00FB // motor is going up and latch was bypassed!
                 ; 0000 00FC 
                 ; 0000 00FD // stop motor
                 ; 0000 00FE Motor_R_L_Off(OFF);
00025a e0a0      	LDI  R26,LOW(0)
00025b de2b      	RCALL _Motor_R_L_Off
                 ; 0000 00FF }
                 ; 0000 0100 
                 ; 0000 0101 if (get_motor_state() == Down && (In150V_Val > latch_val)){
                 _0x67:
00025c de3c      	RCALL _get_motor_state
00025d 9732      	SBIW R30,2
00025e f429      	BRNE _0x6B
00025f d039      	RCALL SUBOPT_0x8
000260 f009      	BREQ PC+2
000261 f408      	BRCC PC+2
000262 c001      	RJMP _0x6B
000263 c001      	RJMP _0x6C
                 _0x6B:
000264 c002      	RJMP _0x6A
                 _0x6C:
                 ; 0000 0102 // motor is going down and latch was bypassed!
                 ; 0000 0103 
                 ; 0000 0104 // stop motor
                 ; 0000 0105 Motor_R_L_Off(OFF);
000265 e0a0      	LDI  R26,LOW(0)
000266 de20      	RCALL _Motor_R_L_Off
                 ; 0000 0106 }
                 ; 0000 0107 
                 ; 0000 0108 
                 ; 0000 0109 }
                 _0x6A:
                 _0x2000001:
000267 9628      	ADIW R28,8
000268 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _AveInPout150V:
000300           	.BYTE 0x4
                 _DISPLAY:
000304           	.BYTE 0x4
                 _SegmentData:
000308           	.BYTE 0x34
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
000269 9724      	SBIW R28,4
00026a e0e0      	LDI  R30,LOW(0)
00026b 83e8      	ST   Y,R30
00026c 83e9      	STD  Y+1,R30
00026d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
00026e e0f0      	LDI  R31,0
00026f 5fe8      	SUBI R30,LOW(-_SegmentData)
000270 4ffc      	SBCI R31,HIGH(-_SegmentData)
000271 81e0      	LD   R30,Z
000272 b9eb      	OUT  0xB,R30
000273 2de8      	MOV  R30,R8
000274 e0f0      	LDI  R31,0
000275 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000276 2766      	CLR  R22
000277 2777      	CLR  R23
000278 d0c7      	RCALL __CDF1
000279 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
                +
00027a e0a0     +LDI R26 , LOW ( 0x42C80000 )
00027b e0b0     +LDI R27 , HIGH ( 0x42C80000 )
00027c ec88     +LDI R24 , BYTE3 ( 0x42C80000 )
00027d e492     +LDI R25 , BYTE4 ( 0x42C80000 )
                 	__GETD2N 0x42C80000
00027e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
00027f 91a0 0300 	LDS  R26,_AveInPout150V
000281 91b0 0301 	LDS  R27,_AveInPout150V+1
000283 9180 0302 	LDS  R24,_AveInPout150V+2
000285 9190 0303 	LDS  R25,_AveInPout150V+3
000287 d040      	RCALL __CDF2U
000288 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
                +
000289 81e9     +LDD R30 , Y + 1
00028a 81fa     +LDD R31 , Y + 1 + 1
00028b 816b     +LDD R22 , Y + 1 + 2
00028c 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
00028d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
00028e d01e      	RCALL __DIVW21U
00028f 01df      	MOVW R26,R30
000290 e0ea      	LDI  R30,LOW(10)
000291 e0f0      	LDI  R31,HIGH(10)
000292 d02d      	RCALL __MODW21U
000293 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x7:
                +
000294 81ac     +LDD R26 , Y + 4
000295 81bd     +LDD R27 , Y + 4 + 1
000296 818e     +LDD R24 , Y + 4 + 2
000297 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000298 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
                +
000299 81e8     +LDD R30 , Y + 0
00029a 81f9     +LDD R31 , Y + 0 + 1
00029b 816a     +LDD R22 , Y + 0 + 2
00029c 817b     +LDD R23 , Y + 0 + 3
                 	__GETD1S 0
00029d dff6      	RCALL SUBOPT_0x7
00029e d1b5      	RCALL __CMPF12
00029f 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __ANEGD1:
0002a0 95f0      	COM  R31
0002a1 9560      	COM  R22
0002a2 9570      	COM  R23
0002a3 95e1      	NEG  R30
0002a4 4fff      	SBCI R31,-1
0002a5 4f6f      	SBCI R22,-1
0002a6 4f7f      	SBCI R23,-1
0002a7 9508      	RET
                 
                 __ASRW2:
0002a8 95f5      	ASR  R31
0002a9 95e7      	ROR  R30
0002aa 95f5      	ASR  R31
0002ab 95e7      	ROR  R30
0002ac 9508      	RET
                 
                 __DIVW21U:
0002ad 2400      	CLR  R0
0002ae 2411      	CLR  R1
0002af e190      	LDI  R25,16
                 __DIVW21U1:
0002b0 0faa      	LSL  R26
0002b1 1fbb      	ROL  R27
0002b2 1c00      	ROL  R0
0002b3 1c11      	ROL  R1
0002b4 1a0e      	SUB  R0,R30
0002b5 0a1f      	SBC  R1,R31
0002b6 f418      	BRCC __DIVW21U2
0002b7 0e0e      	ADD  R0,R30
0002b8 1e1f      	ADC  R1,R31
0002b9 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002ba 60a1      	SBR  R26,1
                 __DIVW21U3:
0002bb 959a      	DEC  R25
0002bc f799      	BRNE __DIVW21U1
0002bd 01fd      	MOVW R30,R26
0002be 01d0      	MOVW R26,R0
0002bf 9508      	RET
                 
                 __MODW21U:
0002c0 dfec      	RCALL __DIVW21U
0002c1 01fd      	MOVW R30,R26
0002c2 9508      	RET
                 
                 __PUTPARD2:
0002c3 939a      	ST   -Y,R25
0002c4 938a      	ST   -Y,R24
0002c5 93ba      	ST   -Y,R27
0002c6 93aa      	ST   -Y,R26
0002c7 9508      	RET
                 
                 __CDF2U:
0002c8 9468      	SET
0002c9 c001      	RJMP __CDF2U0
                 __CDF2:
0002ca 94e8      	CLT
                 __CDF2U0:
0002cb d001      	RCALL __SWAPD12
0002cc d074      	RCALL __CDF1U0
                 
                 __SWAPD12:
0002cd 2e18      	MOV  R1,R24
0002ce 2f86      	MOV  R24,R22
0002cf 2d61      	MOV  R22,R1
0002d0 2e19      	MOV  R1,R25
0002d1 2f97      	MOV  R25,R23
0002d2 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0002d3 2e1b      	MOV  R1,R27
0002d4 2fbf      	MOV  R27,R31
0002d5 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0002d6 2e1a      	MOV  R1,R26
0002d7 2fae      	MOV  R26,R30
0002d8 2de1      	MOV  R30,R1
0002d9 9508      	RET
                 
                 __ROUND_REPACK:
0002da 2355      	TST  R21
0002db f442      	BRPL __REPACK
0002dc 3850      	CPI  R21,0x80
0002dd f411      	BRNE __ROUND_REPACK0
0002de ffe0      	SBRS R30,0
0002df c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0002e0 9631      	ADIW R30,1
0002e1 1f69      	ADC  R22,R25
0002e2 1f79      	ADC  R23,R25
0002e3 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0002e4 e850      	LDI  R21,0x80
0002e5 2757      	EOR  R21,R23
0002e6 f411      	BRNE __REPACK0
0002e7 935f      	PUSH R21
0002e8 c0c8      	RJMP __ZERORES
                 __REPACK0:
0002e9 3f5f      	CPI  R21,0xFF
0002ea f031      	BREQ __REPACK1
0002eb 0f66      	LSL  R22
0002ec 0c00      	LSL  R0
0002ed 9557      	ROR  R21
0002ee 9567      	ROR  R22
0002ef 2f75      	MOV  R23,R21
0002f0 9508      	RET
                 __REPACK1:
0002f1 935f      	PUSH R21
0002f2 2000      	TST  R0
0002f3 f00a      	BRMI __REPACK2
0002f4 c0c7      	RJMP __MAXRES
                 __REPACK2:
0002f5 c0c0      	RJMP __MINRES
                 
                 __UNPACK:
0002f6 e850      	LDI  R21,0x80
0002f7 2e19      	MOV  R1,R25
0002f8 2215      	AND  R1,R21
0002f9 0f88      	LSL  R24
0002fa 1f99      	ROL  R25
0002fb 2795      	EOR  R25,R21
0002fc 0f55      	LSL  R21
0002fd 9587      	ROR  R24
                 
                 __UNPACK1:
0002fe e850      	LDI  R21,0x80
0002ff 2e07      	MOV  R0,R23
000300 2205      	AND  R0,R21
000301 0f66      	LSL  R22
000302 1f77      	ROL  R23
000303 2775      	EOR  R23,R21
000304 0f55      	LSL  R21
000305 9567      	ROR  R22
000306 9508      	RET
                 
                 __CFD1U:
000307 9468      	SET
000308 c001      	RJMP __CFD1U0
                 __CFD1:
000309 94e8      	CLT
                 __CFD1U0:
00030a 935f      	PUSH R21
00030b dff2      	RCALL __UNPACK1
00030c 3870      	CPI  R23,0x80
00030d f018      	BRLO __CFD10
00030e 3f7f      	CPI  R23,0xFF
00030f f408      	BRCC __CFD10
000310 c0a0      	RJMP __ZERORES
                 __CFD10:
000311 e156      	LDI  R21,22
000312 1b57      	SUB  R21,R23
000313 f4aa      	BRPL __CFD11
000314 9551      	NEG  R21
000315 3058      	CPI  R21,8
000316 f40e      	BRTC __CFD19
000317 3059      	CPI  R21,9
                 __CFD19:
000318 f030      	BRLO __CFD17
000319 efef      	SER  R30
00031a efff      	SER  R31
00031b ef6f      	SER  R22
00031c e77f      	LDI  R23,0x7F
00031d f977      	BLD  R23,7
00031e c01a      	RJMP __CFD15
                 __CFD17:
00031f 2777      	CLR  R23
000320 2355      	TST  R21
000321 f0b9      	BREQ __CFD15
                 __CFD18:
000322 0fee      	LSL  R30
000323 1fff      	ROL  R31
000324 1f66      	ROL  R22
000325 1f77      	ROL  R23
000326 955a      	DEC  R21
000327 f7d1      	BRNE __CFD18
000328 c010      	RJMP __CFD15
                 __CFD11:
000329 2777      	CLR  R23
                 __CFD12:
00032a 3058      	CPI  R21,8
00032b f028      	BRLO __CFD13
00032c 2fef      	MOV  R30,R31
00032d 2ff6      	MOV  R31,R22
00032e 2f67      	MOV  R22,R23
00032f 5058      	SUBI R21,8
000330 cff9      	RJMP __CFD12
                 __CFD13:
000331 2355      	TST  R21
000332 f031      	BREQ __CFD15
                 __CFD14:
000333 9576      	LSR  R23
000334 9567      	ROR  R22
000335 95f7      	ROR  R31
000336 95e7      	ROR  R30
000337 955a      	DEC  R21
000338 f7d1      	BRNE __CFD14
                 __CFD15:
000339 2000      	TST  R0
00033a f40a      	BRPL __CFD16
00033b df64      	RCALL __ANEGD1
                 __CFD16:
00033c 915f      	POP  R21
00033d 9508      	RET
                 
                 __CDF1U:
00033e 9468      	SET
00033f c001      	RJMP __CDF1U0
                 __CDF1:
000340 94e8      	CLT
                 __CDF1U0:
000341 9730      	SBIW R30,0
000342 4060      	SBCI R22,0
000343 4070      	SBCI R23,0
000344 f0b1      	BREQ __CDF10
000345 2400      	CLR  R0
000346 f026      	BRTS __CDF11
000347 2377      	TST  R23
000348 f412      	BRPL __CDF11
000349 9400      	COM  R0
00034a df55      	RCALL __ANEGD1
                 __CDF11:
00034b 2e17      	MOV  R1,R23
00034c e17e      	LDI  R23,30
00034d 2011      	TST  R1
                 __CDF12:
00034e f032      	BRMI __CDF13
00034f 957a      	DEC  R23
000350 0fee      	LSL  R30
000351 1fff      	ROL  R31
000352 1f66      	ROL  R22
000353 1c11      	ROL  R1
000354 cff9      	RJMP __CDF12
                 __CDF13:
000355 2fef      	MOV  R30,R31
000356 2ff6      	MOV  R31,R22
000357 2d61      	MOV  R22,R1
000358 935f      	PUSH R21
000359 df8a      	RCALL __REPACK
00035a 915f      	POP  R21
                 __CDF10:
00035b 9508      	RET
                 
                 __SWAPACC:
00035c 934f      	PUSH R20
00035d 01af      	MOVW R20,R30
00035e 01fd      	MOVW R30,R26
00035f 01da      	MOVW R26,R20
000360 01ab      	MOVW R20,R22
000361 01bc      	MOVW R22,R24
000362 01ca      	MOVW R24,R20
000363 2d40      	MOV  R20,R0
000364 2c01      	MOV  R0,R1
000365 2e14      	MOV  R1,R20
000366 914f      	POP  R20
000367 9508      	RET
                 
                 __UADD12:
000368 0fea      	ADD  R30,R26
000369 1ffb      	ADC  R31,R27
00036a 1f68      	ADC  R22,R24
00036b 9508      	RET
                 
                 __NEGMAN1:
00036c 95e0      	COM  R30
00036d 95f0      	COM  R31
00036e 9560      	COM  R22
00036f 5fef      	SUBI R30,-1
000370 4fff      	SBCI R31,-1
000371 4f6f      	SBCI R22,-1
000372 9508      	RET
                 
                 __ADDF12:
000373 935f      	PUSH R21
000374 df81      	RCALL __UNPACK
000375 3890      	CPI  R25,0x80
000376 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000377 3870      	CPI  R23,0x80
000378 f121      	BREQ __ADDF128
                 __ADDF121:
000379 2f57      	MOV  R21,R23
00037a 1b59      	SUB  R21,R25
00037b f12b      	BRVS __ADDF1211
00037c f412      	BRPL __ADDF122
00037d dfde      	RCALL __SWAPACC
00037e cffa      	RJMP __ADDF121
                 __ADDF122:
00037f 3158      	CPI  R21,24
000380 f018      	BRLO __ADDF123
000381 27aa      	CLR  R26
000382 27bb      	CLR  R27
000383 2788      	CLR  R24
                 __ADDF123:
000384 3058      	CPI  R21,8
000385 f028      	BRLO __ADDF124
000386 2fab      	MOV  R26,R27
000387 2fb8      	MOV  R27,R24
000388 2788      	CLR  R24
000389 5058      	SUBI R21,8
00038a cff9      	RJMP __ADDF123
                 __ADDF124:
00038b 2355      	TST  R21
00038c f029      	BREQ __ADDF126
                 __ADDF125:
00038d 9586      	LSR  R24
00038e 95b7      	ROR  R27
00038f 95a7      	ROR  R26
000390 955a      	DEC  R21
000391 f7d9      	BRNE __ADDF125
                 __ADDF126:
000392 2d50      	MOV  R21,R0
000393 2551      	EOR  R21,R1
000394 f072      	BRMI __ADDF127
000395 dfd2      	RCALL __UADD12
000396 f438      	BRCC __ADDF129
000397 9567      	ROR  R22
000398 95f7      	ROR  R31
000399 95e7      	ROR  R30
00039a 9573      	INC  R23
00039b f413      	BRVC __ADDF129
00039c c01f      	RJMP __MAXRES
                 __ADDF128:
00039d dfbe      	RCALL __SWAPACC
                 __ADDF129:
00039e df45      	RCALL __REPACK
00039f 915f      	POP  R21
0003a0 9508      	RET
                 __ADDF1211:
0003a1 f7d8      	BRCC __ADDF128
0003a2 cffb      	RJMP __ADDF129
                 __ADDF127:
0003a3 1bea      	SUB  R30,R26
0003a4 0bfb      	SBC  R31,R27
0003a5 0b68      	SBC  R22,R24
0003a6 f051      	BREQ __ZERORES
0003a7 f410      	BRCC __ADDF1210
0003a8 9400      	COM  R0
0003a9 dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
0003aa 2366      	TST  R22
0003ab f392      	BRMI __ADDF129
0003ac 0fee      	LSL  R30
0003ad 1fff      	ROL  R31
0003ae 1f66      	ROL  R22
0003af 957a      	DEC  R23
0003b0 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0003b1 27ee      	CLR  R30
0003b2 27ff      	CLR  R31
0003b3 01bf      	MOVW R22,R30
0003b4 915f      	POP  R21
0003b5 9508      	RET
                 
                 __MINRES:
0003b6 efef      	SER  R30
0003b7 efff      	SER  R31
0003b8 e76f      	LDI  R22,0x7F
0003b9 ef7f      	SER  R23
0003ba 915f      	POP  R21
0003bb 9508      	RET
                 
                 __MAXRES:
0003bc efef      	SER  R30
0003bd efff      	SER  R31
0003be e76f      	LDI  R22,0x7F
0003bf e77f      	LDI  R23,0x7F
0003c0 915f      	POP  R21
0003c1 9508      	RET
                 
                 __MULF12:
0003c2 935f      	PUSH R21
0003c3 df32      	RCALL __UNPACK
0003c4 3870      	CPI  R23,0x80
0003c5 f359      	BREQ __ZERORES
0003c6 3890      	CPI  R25,0x80
0003c7 f349      	BREQ __ZERORES
0003c8 2401      	EOR  R0,R1
0003c9 9408      	SEC
0003ca 1f79      	ADC  R23,R25
0003cb f423      	BRVC __MULF124
0003cc f324      	BRLT __ZERORES
                 __MULF125:
0003cd 2000      	TST  R0
0003ce f33a      	BRMI __MINRES
0003cf cfec      	RJMP __MAXRES
                 __MULF124:
0003d0 920f      	PUSH R0
0003d1 931f      	PUSH R17
0003d2 932f      	PUSH R18
0003d3 933f      	PUSH R19
0003d4 934f      	PUSH R20
0003d5 2711      	CLR  R17
0003d6 2722      	CLR  R18
0003d7 2799      	CLR  R25
0003d8 9f68      	MUL  R22,R24
0003d9 01a0      	MOVW R20,R0
0003da 9f8f      	MUL  R24,R31
0003db 2d30      	MOV  R19,R0
0003dc 0d41      	ADD  R20,R1
0003dd 1f59      	ADC  R21,R25
0003de 9f6b      	MUL  R22,R27
0003df 0d30      	ADD  R19,R0
0003e0 1d41      	ADC  R20,R1
0003e1 1f59      	ADC  R21,R25
0003e2 9f8e      	MUL  R24,R30
0003e3 d027      	RCALL __MULF126
0003e4 9fbf      	MUL  R27,R31
0003e5 d025      	RCALL __MULF126
0003e6 9f6a      	MUL  R22,R26
0003e7 d023      	RCALL __MULF126
0003e8 9fbe      	MUL  R27,R30
0003e9 d01d      	RCALL __MULF127
0003ea 9faf      	MUL  R26,R31
0003eb d01b      	RCALL __MULF127
0003ec 9fae      	MUL  R26,R30
0003ed 0d11      	ADD  R17,R1
0003ee 1f29      	ADC  R18,R25
0003ef 1f39      	ADC  R19,R25
0003f0 1f49      	ADC  R20,R25
0003f1 1f59      	ADC  R21,R25
0003f2 2fe3      	MOV  R30,R19
0003f3 2ff4      	MOV  R31,R20
0003f4 2f65      	MOV  R22,R21
0003f5 2f52      	MOV  R21,R18
0003f6 914f      	POP  R20
0003f7 913f      	POP  R19
0003f8 912f      	POP  R18
0003f9 911f      	POP  R17
0003fa 900f      	POP  R0
0003fb 2366      	TST  R22
0003fc f02a      	BRMI __MULF122
0003fd 0f55      	LSL  R21
0003fe 1fee      	ROL  R30
0003ff 1fff      	ROL  R31
000400 1f66      	ROL  R22
000401 c002      	RJMP __MULF123
                 __MULF122:
000402 9573      	INC  R23
000403 f24b      	BRVS __MULF125
                 __MULF123:
000404 ded5      	RCALL __ROUND_REPACK
000405 915f      	POP  R21
000406 9508      	RET
                 
                 __MULF127:
000407 0d10      	ADD  R17,R0
000408 1d21      	ADC  R18,R1
000409 1f39      	ADC  R19,R25
00040a c002      	RJMP __MULF128
                 __MULF126:
00040b 0d20      	ADD  R18,R0
00040c 1d31      	ADC  R19,R1
                 __MULF128:
00040d 1f49      	ADC  R20,R25
00040e 1f59      	ADC  R21,R25
00040f 9508      	RET
                 
                 __DIVF21:
000410 935f      	PUSH R21
000411 dee4      	RCALL __UNPACK
000412 3870      	CPI  R23,0x80
000413 f421      	BRNE __DIVF210
000414 2011      	TST  R1
                 __DIVF211:
000415 f40a      	BRPL __DIVF219
000416 cf9f      	RJMP __MINRES
                 __DIVF219:
000417 cfa4      	RJMP __MAXRES
                 __DIVF210:
000418 3890      	CPI  R25,0x80
000419 f409      	BRNE __DIVF218
                 __DIVF217:
00041a cf96      	RJMP __ZERORES
                 __DIVF218:
00041b 2401      	EOR  R0,R1
00041c 9408      	SEC
00041d 0b97      	SBC  R25,R23
00041e f41b      	BRVC __DIVF216
00041f f3d4      	BRLT __DIVF217
000420 2000      	TST  R0
000421 cff3      	RJMP __DIVF211
                 __DIVF216:
000422 2f79      	MOV  R23,R25
000423 931f      	PUSH R17
000424 932f      	PUSH R18
000425 933f      	PUSH R19
000426 934f      	PUSH R20
000427 2411      	CLR  R1
000428 2711      	CLR  R17
000429 2722      	CLR  R18
00042a 2733      	CLR  R19
00042b 01a9      	MOVW R20,R18
00042c e290      	LDI  R25,32
                 __DIVF212:
00042d 17ae      	CP   R26,R30
00042e 07bf      	CPC  R27,R31
00042f 0786      	CPC  R24,R22
000430 0741      	CPC  R20,R17
000431 f030      	BRLO __DIVF213
000432 1bae      	SUB  R26,R30
000433 0bbf      	SBC  R27,R31
000434 0b86      	SBC  R24,R22
000435 0b41      	SBC  R20,R17
000436 9408      	SEC
000437 c001      	RJMP __DIVF214
                 __DIVF213:
000438 9488      	CLC
                 __DIVF214:
000439 1f55      	ROL  R21
00043a 1f22      	ROL  R18
00043b 1f33      	ROL  R19
00043c 1c11      	ROL  R1
00043d 1faa      	ROL  R26
00043e 1fbb      	ROL  R27
00043f 1f88      	ROL  R24
000440 1f44      	ROL  R20
000441 959a      	DEC  R25
000442 f751      	BRNE __DIVF212
000443 01f9      	MOVW R30,R18
000444 2d61      	MOV  R22,R1
000445 914f      	POP  R20
000446 913f      	POP  R19
000447 912f      	POP  R18
000448 911f      	POP  R17
000449 2366      	TST  R22
00044a f032      	BRMI __DIVF215
00044b 0f55      	LSL  R21
00044c 1fee      	ROL  R30
00044d 1fff      	ROL  R31
00044e 1f66      	ROL  R22
00044f 957a      	DEC  R23
000450 f24b      	BRVS __DIVF217
                 __DIVF215:
000451 de88      	RCALL __ROUND_REPACK
000452 915f      	POP  R21
000453 9508      	RET
                 
                 __CMPF12:
000454 2399      	TST  R25
000455 f09a      	BRMI __CMPF120
000456 2377      	TST  R23
000457 f042      	BRMI __CMPF121
000458 1797      	CP   R25,R23
000459 f048      	BRLO __CMPF122
00045a f429      	BRNE __CMPF121
00045b 17ae      	CP   R26,R30
00045c 07bf      	CPC  R27,R31
00045d 0786      	CPC  R24,R22
00045e f020      	BRLO __CMPF122
00045f f031      	BREQ __CMPF123
                 __CMPF121:
000460 9498      	CLZ
000461 9488      	CLC
000462 9508      	RET
                 __CMPF122:
000463 9498      	CLZ
000464 9408      	SEC
000465 9508      	RET
                 __CMPF123:
000466 9418      	SEZ
000467 9488      	CLC
000468 9508      	RET
                 __CMPF120:
000469 2377      	TST  R23
00046a f7c2      	BRPL __CMPF122
00046b 1797      	CP   R25,R23
00046c f398      	BRLO __CMPF121
00046d f7a9      	BRNE __CMPF122
00046e 17ea      	CP   R30,R26
00046f 07fb      	CPC  R31,R27
000470 0768      	CPC  R22,R24
000471 f388      	BRLO __CMPF122
000472 f399      	BREQ __CMPF123
000473 cfec      	RJMP __CMPF121
                 
                 _delay_ms:
000474 9610      	adiw r26,0
000475 f039      	breq __delay_ms1
                 __delay_ms0:
000476 95a8      	wdr
                +
000477 ea80     +LDI R24 , LOW ( 0xFA0 )
000478 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000479 9701     +SBIW R24 , 1
00047a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00047b 9711      	sbiw r26,1
00047c f7c9      	brne __delay_ms0
                 __delay_ms1:
00047d 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  33 r1 :  35 r2 :   0 r3 :   8 r4 :   8 r5 :   3 r6 :   3 r7 :   5 
r8 :   5 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  10 r17:  30 r18:  13 r19:  12 r20:  22 r21:  59 r22:  58 r23:  53 
r24:  40 r25:  41 r26:  58 r27:  30 r28:   6 r29:   1 r30: 225 r31:  73 
x  :   3 y  :  62 z  :   8 
Registers used: 28 out of 35 (80.0%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :   7 
adiw  :   6 and   :   2 andi  :   4 asr   :   3 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   8 brcs  :   0 break :   0 breq  :  19 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   2 brmi  :   9 brne  :  28 brpl  :   7 brsh  :   4 brtc  :   1 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  :   0 
cbi   :  13 cbr   :   0 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  29 cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :   8 
cp    :  10 cpc   :  12 cpi   :  23 cpse  :   0 dec   :  10 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   4 jmp   :  27 ld    :  16 ldd   :  16 ldi   : 119 
lds   :  12 lpm   :   7 lsl   :  12 lsr   :   2 mov   :  55 movw  :  26 
mul   :   9 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   3 
ori   :   3 out   :  25 pop   :  18 push  :  17 rcall :  81 ret   :  43 
reti  :   1 rjmp  :  56 rol   :  27 ror   :  15 sbc   :   7 sbci  :   8 
sbi   :  11 sbic  :   3 sbis  :   2 sbiw  :  11 sbr   :   1 sbrc  :   0 
sbrs  :   1 sec   :   4 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   3 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  29 std   :   5 sts   :  45 sub   :   5 subi  :   4 swap  :   0 
tst   :  18 wdr   :   1 
Instructions used: 76 out of 116 (65.5%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008fc   2228     72   2300   32768   7.0%
[.dseg] 0x000100 0x00033c      0     60     60    2048   2.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
