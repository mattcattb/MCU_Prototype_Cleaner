
AVRASM ver. 2.1.30  E:\IEC.LLC\2 Camera Lift Project\C Code\Debug\List\IECLLC_P2_1.asm Fri Dec 15 14:05:15 2023

E:\IEC.LLC\2 Camera Lift Project\C Code\Debug\List\IECLLC_P2_1.asm(1421): warning: Register r3 already defined by the .DEF directive
E:\IEC.LLC\2 Camera Lift Project\C Code\Debug\List\IECLLC_P2_1.asm(1422): warning: Register r4 already defined by the .DEF directive
E:\IEC.LLC\2 Camera Lift Project\C Code\Debug\List\IECLLC_P2_1.asm(1423): warning: Register r5 already defined by the .DEF directive
E:\IEC.LLC\2 Camera Lift Project\C Code\Debug\List\IECLLC_P2_1.asm(1424): warning: Register r6 already defined by the .DEF directive
E:\IEC.LLC\2 Camera Lift Project\C Code\Debug\List\IECLLC_P2_1.asm(1425): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V4.00a Evaluation
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _InPout150V=R3
                 	.DEF _InPout150V_msb=R4
                 	.DEF _FreeCount=R5
                 	.DEF _FreeCount_msb=R6
                 	.DEF _DISPLAY_Counter=R8
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0058 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 00d1 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 007b
000035 0000      	.DB  0x7B,0x0,0x0,0x0
000036 0000      	.DB  0x0,0x0
                 
                 _0x3:
000037 063f
000038 4f5b
000039 6d66
00003a 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00003b 6f7f
00003c 3900
00003d 7873
00003e 3f5c      	.DB  0x7F,0x6F,0x0,0x39,0x73,0x78,0x5C,0x3F
00003f 7137
000040 796e
000041 3850
000042 4054      	.DB  0x37,0x71,0x6E,0x79,0x50,0x38,0x54,0x40
000043 1c76
000044 773e
000045 ff6d
000046 86bf      	.DB  0x76,0x1C,0x3E,0x77,0x6D,0xFF,0xBF,0x86
000047 cfdb
000048 ede6
000049 87fd
00004a efff      	.DB  0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF
00004b 553f
00004c 5367
00004d 8020
00004e 5e7c      	.DB  0x3F,0x55,0x67,0x53,0x20,0x80,0x7C,0x5E
00004f 106a
E:\IEC.LLC\2 Camera Lift Project\C Code\Debug\List\IECLLC_P2_1.asm(1476): warning: .cseg .db misalignment - padding zero byte
000050 0063      	.DB  0x6A,0x10,0x63
                 
                 __GLOBAL_INI_TBL:
000051 0006      	.DW  0x06
000052 0003      	.DW  0x03
000053 0068      	.DW  __REG_VARS*2
                 
000054 0033      	.DW  0x33
000055 0308      	.DW  _SegmentData
000056 006e      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
000057 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000058 94f8      	CLI
                 
000059 27ee      	CLR  R30
00005a bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005b e0f1      	LDI  R31,1
00005c bff5      	OUT  MCUCR,R31
00005d bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00005e e08d      	LDI  R24,(14-2)+1
00005f e0a2      	LDI  R26,2
000060 27bb      	CLR  R27
                 __CLEAR_REG:
000061 93ed      	ST   X+,R30
000062 958a      	DEC  R24
000063 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000064 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000065 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000066 e0a0      	LDI  R26,LOW(__SRAM_START)
000067 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000068 93ed      	ST   X+,R30
000069 9701      	SBIW R24,1
00006a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006b eae2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006d 9185      	LPM  R24,Z+
00006e 9195      	LPM  R25,Z+
00006f 9700      	SBIW R24,0
000070 f061      	BREQ __GLOBAL_INI_END
000071 91a5      	LPM  R26,Z+
000072 91b5      	LPM  R27,Z+
000073 9005      	LPM  R0,Z+
000074 9015      	LPM  R1,Z+
000075 01bf      	MOVW R22,R30
000076 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000077 9005      	LPM  R0,Z+
000078 920d      	ST   X+,R0
000079 9701      	SBIW R24,1
00007a f7e1      	BRNE __GLOBAL_INI_LOOP
00007b 01fb      	MOVW R30,R22
00007c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00007d e0e0      	LDI  R30,__GPIOR0_INIT
00007e bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007f efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000080 bfed      	OUT  SPL,R30
000081 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000082 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000083 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000084 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000085 940c 0158 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;unsigned int read_adc(unsigned char adc_input);
                 
                 	.DSEG
                 ;void Motor_R_L_Off (unsigned char Motor)
                 ; 0000 004A {
                 
                 	.CSEG
                 _Motor_R_L_Off:
                 ; .FSTART _Motor_R_L_Off
                 ; 0000 004B if(Motor == Right)
000087 931a      	ST   -Y,R17
000088 2f1a      	MOV  R17,R26
                 ;	Motor -> R17
000089 3011      	CPI  R17,1
00008a f421      	BRNE _0x4
                 ; 0000 004C {
                 ; 0000 004D M_D_L = 0;
00008b 9844      	CBI  0x8,4
                 ; 0000 004E M_D_R = 1;
00008c 9a43      	SBI  0x8,3
                 ; 0000 004F M_EN  = 1;
00008d 9a45      	SBI  0x8,5
                 ; 0000 0050 }
                 ; 0000 0051 else if(Motor == Left)
00008e c009      	RJMP _0xB
                 _0x4:
00008f 3012      	CPI  R17,2
000090 f421      	BRNE _0xC
                 ; 0000 0052 {
                 ; 0000 0053 M_D_R = 0;
000091 9843      	CBI  0x8,3
                 ; 0000 0054 M_D_L = 1;
000092 9a44      	SBI  0x8,4
                 ; 0000 0055 M_EN  = 1;
000093 9a45      	SBI  0x8,5
                 ; 0000 0056 }
                 ; 0000 0057 else
000094 c003      	RJMP _0x13
                 _0xC:
                 ; 0000 0058 {
                 ; 0000 0059 M_D_R = 0;
000095 9843      	CBI  0x8,3
                 ; 0000 005A M_D_L = 0;
000096 9844      	CBI  0x8,4
                 ; 0000 005B M_EN  = 0;
000097 9845      	CBI  0x8,5
                 ; 0000 005C }
                 _0x13:
                 _0xB:
                 ; 0000 005D }
000098 c0bd      	RJMP _0x2000001
                 ; .FEND
                 ;void LEDS_On_Off (unsigned char Led1, unsigned char Led2)
                 ; 0000 0060 {
                 _LEDS_On_Off:
                 ; .FSTART _LEDS_On_Off
                 ; 0000 0061 if(Led1 == ON)
000099 931a      	ST   -Y,R17
00009a 930a      	ST   -Y,R16
00009b 2f1a      	MOV  R17,R26
00009c 810a      	LDD  R16,Y+2
                 ;	Led1 -> R16
                 ;	Led2 -> R17
00009d 3001      	CPI  R16,1
00009e f411      	BRNE _0x1A
                 ; 0000 0062 IN0_LED = ON;
00009f 9a2b      	SBI  0x5,3
                 ; 0000 0063 else
0000a0 c001      	RJMP _0x1D
                 _0x1A:
                 ; 0000 0064 IN0_LED = OFF;
0000a1 982b      	CBI  0x5,3
                 ; 0000 0065 
                 ; 0000 0066 if(Led2 == ON)
                 _0x1D:
0000a2 3011      	CPI  R17,1
0000a3 f411      	BRNE _0x20
                 ; 0000 0067 IN1_LED = ON;
0000a4 9a2c      	SBI  0x5,4
                 ; 0000 0068 else
0000a5 c001      	RJMP _0x23
                 _0x20:
                 ; 0000 0069 IN1_LED = OFF;
0000a6 982c      	CBI  0x5,4
                 ; 0000 006A 
                 ; 0000 006B SEL_LED = 1;
                 _0x23:
0000a7 9a2d      	SBI  0x5,5
                 ; 0000 006C EN_LED  = 1;
0000a8 9a42      	SBI  0x8,2
                 ; 0000 006D }
0000a9 8119      	LDD  R17,Y+1
0000aa 8108      	LDD  R16,Y+0
0000ab 9623      	ADIW R28,3
0000ac 9508      	RET
                 ; .FEND
                 ;void Show_Value (unsigned int In)
                 ; 0000 0070 {
                 _Show_Value:
                 ; .FSTART _Show_Value
                 ; 0000 0071 if(InPout150V <= 100)
0000ad 931a      	ST   -Y,R17
0000ae 930a      	ST   -Y,R16
0000af 018d      	MOVW R16,R26
                 ;	In -> R16,R17
0000b0 e6e4      	LDI  R30,LOW(100)
0000b1 e0f0      	LDI  R31,HIGH(100)
0000b2 15e3      	CP   R30,R3
0000b3 05f4      	CPC  R31,R4
0000b4 f038      	BRLO _0x2A
                 ; 0000 0072 {
                 ; 0000 0073 DISPLAY[1] = 19;//Err
0000b5 e1e3      	LDI  R30,LOW(19)
                +
0000b6 93e0 0305+STS _DISPLAY + ( 1 ) , R30
                 	__PUTB1MN _DISPLAY,1
                 ; 0000 0074 DISPLAY[2] = 20;
0000b8 e1e4      	LDI  R30,LOW(20)
                +
0000b9 93e0 0306+STS _DISPLAY + ( 2 ) , R30
                 	__PUTB1MN _DISPLAY,2
                 ; 0000 0075 DISPLAY[3] = 20;
0000bb c010      	RJMP _0x4A
                 ; 0000 0076 }
                 ; 0000 0077 else
                 _0x2A:
                 ; 0000 0078 {
                 ; 0000 0079 DISPLAY[1] = ((In / 100) % 10);
0000bc 01d8      	MOVW R26,R16
0000bd e6e4      	LDI  R30,LOW(100)
0000be e0f0      	LDI  R31,HIGH(100)
0000bf d110      	RCALL SUBOPT_0x0
                +
0000c0 93e0 0305+STS _DISPLAY + ( 1 ) , R30
                 	__PUTB1MN _DISPLAY,1
                 ; 0000 007A DISPLAY[2] = ((In / 10) % 10);
0000c2 01d8      	MOVW R26,R16
0000c3 e0ea      	LDI  R30,LOW(10)
0000c4 e0f0      	LDI  R31,HIGH(10)
0000c5 d10a      	RCALL SUBOPT_0x0
                +
0000c6 93e0 0306+STS _DISPLAY + ( 2 ) , R30
                 	__PUTB1MN _DISPLAY,2
                 ; 0000 007B DISPLAY[3] = ((In / 1) % 10);
0000c8 01d8      	MOVW R26,R16
0000c9 e0ea      	LDI  R30,LOW(10)
0000ca e0f0      	LDI  R31,HIGH(10)
0000cb d151      	RCALL __MODW21U
                 _0x4A:
                +
0000cc 93e0 0307+STS _DISPLAY + ( 3 ) , R30
                 	__PUTB1MN _DISPLAY,3
                 ; 0000 007C }
                 ; 0000 007D }
0000ce 9109      	LD   R16,Y+
0000cf 9119      	LD   R17,Y+
0000d0 9508      	RET
                 ; .FEND
                 ;interrupt [17] void timer0_ovf_isr(void)
                 ; 0000 0081 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0000d1 920a      	ST   -Y,R0
0000d2 921a      	ST   -Y,R1
0000d3 92fa      	ST   -Y,R15
0000d4 936a      	ST   -Y,R22
0000d5 937a      	ST   -Y,R23
0000d6 938a      	ST   -Y,R24
0000d7 939a      	ST   -Y,R25
0000d8 93aa      	ST   -Y,R26
0000d9 93ba      	ST   -Y,R27
0000da 93ea      	ST   -Y,R30
0000db 93fa      	ST   -Y,R31
0000dc b7ef      	IN   R30,SREG
0000dd 93ea      	ST   -Y,R30
                 ; 0000 0082 Seg1 = 1;
0000de 9a28      	SBI  0x5,0
                 ; 0000 0083 Seg2 = 1;
0000df 9a29      	SBI  0x5,1
                 ; 0000 0084 Seg3 = 1;
0000e0 9a2a      	SBI  0x5,2
                 ; 0000 0085 if(DISPLAY_Counter == 0)
0000e1 2088      	TST  R8
0000e2 f429      	BRNE _0x32
                 ; 0000 0086 {
                 ; 0000 0087 SegData = SegmentData[DISPLAY[1]];
                +
0000e3 91e0 0305+LDS R30 , _DISPLAY + ( 1 )
                 	__GETB1MN _DISPLAY,1
0000e5 d0f0      	RCALL SUBOPT_0x1
                 ; 0000 0088 DISPLAY_Counter++;
                 ; 0000 0089 Seg3 = 0;
0000e6 982a      	CBI  0x5,2
                 ; 0000 008A }
                 ; 0000 008B else if( DISPLAY_Counter == 1)
0000e7 c011      	RJMP _0x35
                 _0x32:
0000e8 e0e1      	LDI  R30,LOW(1)
0000e9 15e8      	CP   R30,R8
0000ea f429      	BRNE _0x36
                 ; 0000 008C {
                 ; 0000 008D SegData = SegmentData[DISPLAY[2]];
                +
0000eb 91e0 0306+LDS R30 , _DISPLAY + ( 2 )
                 	__GETB1MN _DISPLAY,2
0000ed d0e8      	RCALL SUBOPT_0x1
                 ; 0000 008E DISPLAY_Counter++;
                 ; 0000 008F Seg2 = 0;
0000ee 9829      	CBI  0x5,1
                 ; 0000 0090 }
                 ; 0000 0091 else
0000ef c009      	RJMP _0x39
                 _0x36:
                 ; 0000 0092 {
                 ; 0000 0093 SegData = SegmentData[DISPLAY[3]];
                +
0000f0 91e0 0307+LDS R30 , _DISPLAY + ( 3 )
                 	__GETB1MN _DISPLAY,3
0000f2 e0f0      	LDI  R31,0
0000f3 5fe8      	SUBI R30,LOW(-_SegmentData)
0000f4 4ffc      	SBCI R31,HIGH(-_SegmentData)
0000f5 81e0      	LD   R30,Z
0000f6 b9eb      	OUT  0xB,R30
                 ; 0000 0094 DISPLAY_Counter = 0;
0000f7 2488      	CLR  R8
                 ; 0000 0095 Seg1 = 0;
0000f8 9828      	CBI  0x5,0
                 ; 0000 0096 }
                 _0x39:
                 _0x35:
                 ; 0000 0097 //------------------------------
                 ; 0000 0098 AveInPout150V += ((read_adc(Sens150Vin)/10)+100);
0000f9 e0a0      	LDI  R26,LOW(0)
0000fa d040      	RCALL _read_adc
0000fb 01df      	MOVW R26,R30
0000fc e0ea      	LDI  R30,LOW(10)
0000fd e0f0      	LDI  R31,HIGH(10)
0000fe d0e7      	RCALL __DIVW21U
0000ff 59ec      	SUBI R30,LOW(-100)
000100 4fff      	SBCI R31,HIGH(-100)
000101 d0db      	RCALL SUBOPT_0x2
000102 2766      	CLR  R22
000103 2777      	CLR  R23
                +
000104 0fea     +ADD R30 , R26
000105 1ffb     +ADC R31 , R27
000106 1f68     +ADC R22 , R24
000107 1f79     +ADC R23 , R25
                 	__ADDD12
000108 93e0 0300 	STS  _AveInPout150V,R30
00010a 93f0 0301 	STS  _AveInPout150V+1,R31
00010c 9360 0302 	STS  _AveInPout150V+2,R22
00010e 9370 0303 	STS  _AveInPout150V+3,R23
                 ; 0000 0099 
                 ; 0000 009A if(FreeCount++ >= 300)
                +
000110 2de5     +MOV R30 , R5
000111 2df6     +MOV R31 , R6
                 	__GETW1R 5,6
000112 9631      	ADIW R30,1
                +
000113 2e5e     +MOV R5 , R30
000114 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
000115 9731      	SBIW R30,1
000116 32ec      	CPI  R30,LOW(0x12C)
000117 e0a1      	LDI  R26,HIGH(0x12C)
000118 07fa      	CPC  R31,R26
000119 f098      	BRLO _0x3C
                 ; 0000 009B {
                 ; 0000 009C FreeCount = 0;
00011a 2455      	CLR  R5
00011b 2466      	CLR  R6
                 ; 0000 009D InPout150V = (AveInPout150V/300);
00011c d0c0      	RCALL SUBOPT_0x2
                +
00011d e2ec     +LDI R30 , LOW ( 0x12C )
00011e e0f1     +LDI R31 , HIGH ( 0x12C )
00011f e060     +LDI R22 , BYTE3 ( 0x12C )
000120 e070     +LDI R23 , BYTE4 ( 0x12C )
                 	__GETD1N 0x12C
000121 d0d7      	RCALL __DIVD21U
                +
000122 2e3e     +MOV R3 , R30
000123 2e4f     +MOV R4 , R31
                 	__PUTW1R 3,4
                 ; 0000 009E AveInPout150V=0;
000124 e0e0      	LDI  R30,LOW(0)
000125 93e0 0300 	STS  _AveInPout150V,R30
000127 93e0 0301 	STS  _AveInPout150V+1,R30
000129 93e0 0302 	STS  _AveInPout150V+2,R30
00012b 93e0 0303 	STS  _AveInPout150V+3,R30
                 ; 0000 009F 
                 ; 0000 00A0 //			if(FreeCount2 == 0){LEDS_On_Off(OFF, OFF); FreeCount2 = 2; }
                 ; 0000 00A1 //			else {LEDS_On_Off(ON, ON); FreeCount2 = 0; }
                 ; 0000 00A2 }
                 ; 0000 00A3 
                 ; 0000 00A4 //------------------------------
                 ; 0000 00A5 }
                 _0x3C:
00012d 91e9      	LD   R30,Y+
00012e bfef      	OUT  SREG,R30
00012f 91f9      	LD   R31,Y+
000130 91e9      	LD   R30,Y+
000131 91b9      	LD   R27,Y+
000132 91a9      	LD   R26,Y+
000133 9199      	LD   R25,Y+
000134 9189      	LD   R24,Y+
000135 9179      	LD   R23,Y+
000136 9169      	LD   R22,Y+
000137 90f9      	LD   R15,Y+
000138 9019      	LD   R1,Y+
000139 9009      	LD   R0,Y+
00013a 9518      	RETI
                 ; .FEND
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 00AD {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 00AE ADMUX = adc_input | ADC_VREF_TYPE;
00013b 931a      	ST   -Y,R17
00013c 2f1a      	MOV  R17,R26
                 ;	adc_input -> R17
00013d 2fe1      	MOV  R30,R17
00013e 6ce0      	ORI  R30,LOW(0xC0)
00013f 93e0 007c 	STS  124,R30
                 ; 0000 00AF // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 00B0 delay_us(10);
                +
000141 e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
000142 958a     +DEC R24
000143 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ; 0000 00B1 // Start the AD conversion
                 ; 0000 00B2 ADCSRA |= (1 << ADSC);
000144 91e0 007a 	LDS  R30,122
000146 64e0      	ORI  R30,0x40
000147 93e0 007a 	STS  122,R30
                 ; 0000 00B3 // Wait for the AD conversion to complete
                 ; 0000 00B4 while ((ADCSRA & (1 << ADIF)) == 0);
                 _0x3D:
000149 91e0 007a 	LDS  R30,122
00014b 71e0      	ANDI R30,LOW(0x10)
00014c f3e1      	BREQ _0x3D
                 ; 0000 00B5 ADCSRA |= (1 << ADIF);
00014d 91e0 007a 	LDS  R30,122
00014f 61e0      	ORI  R30,0x10
000150 93e0 007a 	STS  122,R30
                 ; 0000 00B6 return ADCW;
000152 91e0 0078 	LDS  R30,120
000154 91f0 0079 	LDS  R31,120+1
                 _0x2000001:
000156 9119      	LD   R17,Y+
000157 9508      	RET
                 ; 0000 00B7 }
                 ; .FEND
                 ;void main(void)
                 ; 0000 00BB {
                 _main:
                 ; .FSTART _main
                 ; 0000 00BC #include <Init.c>
000158 e8e0      	LDI  R30,LOW(128)
000159 93e0 0061 	STS  97,R30
00015b e0e0      	LDI  R30,LOW(0)
00015c 93e0 0061 	STS  97,R30
00015e e3ef      	LDI  R30,LOW(63)
00015f b9e4      	OUT  0x4,R30
000160 e0e7      	LDI  R30,LOW(7)
000161 b9e5      	OUT  0x5,R30
000162 e3ec      	LDI  R30,LOW(60)
000163 b9e7      	OUT  0x7,R30
000164 e0e0      	LDI  R30,LOW(0)
000165 b9e8      	OUT  0x8,R30
000166 efef      	LDI  R30,LOW(255)
000167 b9ea      	OUT  0xA,R30
000168 e0e0      	LDI  R30,LOW(0)
000169 b9eb      	OUT  0xB,R30
00016a bde4      	OUT  0x24,R30
00016b e0e3      	LDI  R30,LOW(3)
00016c bde5      	OUT  0x25,R30
00016d e0e0      	LDI  R30,LOW(0)
00016e bde6      	OUT  0x26,R30
00016f bde7      	OUT  0x27,R30
000170 bde8      	OUT  0x28,R30
000171 93e0 0080 	STS  128,R30
000173 93e0 0081 	STS  129,R30
000175 93e0 0085 	STS  133,R30
000177 93e0 0084 	STS  132,R30
000179 93e0 0087 	STS  135,R30
00017b 93e0 0086 	STS  134,R30
00017d 93e0 0089 	STS  137,R30
00017f 93e0 0088 	STS  136,R30
000181 93e0 008b 	STS  139,R30
000183 93e0 008a 	STS  138,R30
000185 93e0 00b6 	STS  182,R30
000187 93e0 00b0 	STS  176,R30
000189 93e0 00b1 	STS  177,R30
00018b 93e0 00b2 	STS  178,R30
00018d 93e0 00b3 	STS  179,R30
00018f 93e0 00b4 	STS  180,R30
000191 e0e1      	LDI  R30,LOW(1)
000192 93e0 006e 	STS  110,R30
000194 e0e0      	LDI  R30,LOW(0)
000195 93e0 006f 	STS  111,R30
000197 93e0 0070 	STS  112,R30
000199 93e0 0069 	STS  105,R30
00019b bbed      	OUT  0x1D,R30
00019c 93e0 0068 	STS  104,R30
00019e 93e0 00c1 	STS  193,R30
0001a0 e8e0      	LDI  R30,LOW(128)
0001a1 bfe0      	OUT  0x30,R30
0001a2 e0e0      	LDI  R30,LOW(0)
0001a3 93e0 007f 	STS  127,R30
0001a5 e8e4      	LDI  R30,LOW(132)
0001a6 93e0 007a 	STS  122,R30
0001a8 e0e0      	LDI  R30,LOW(0)
0001a9 93e0 007b 	STS  123,R30
0001ab 93e0 007e 	STS  126,R30
0001ad bdec      	OUT  0x2C,R30
0001ae 93e0 00bc 	STS  188,R30
0001b0 9478      	SEI
                 ; 0000 00BD 
                 ; 0000 00BE LEDS_On_Off(ON, ON);
0001b1 e0e1      	LDI  R30,LOW(1)
0001b2 93ea      	ST   -Y,R30
0001b3 e0a1      	LDI  R26,LOW(1)
0001b4 dee4      	RCALL _LEDS_On_Off
                 ; 0000 00BF 
                 ; 0000 00C0 while (1)
                 _0x40:
                 ; 0000 00C1 {
                 ; 0000 00C2 //Show_Value(InPout150V);
                 ; 0000 00C3 
                 ; 0000 00C4 //Show_Value(read_adc(Sens150Vin));
                 ; 0000 00C5 //Show_Value(read_adc(Sens_LEDS));
                 ; 0000 00C6 //Show_Value(read_adc(Sens_Motor));
                 ; 0000 00C7 
                 ; 0000 00C8 //Show_Value(((read_adc(Sens150Vin) / 10) + 100));
                 ; 0000 00C9 
                 ; 0000 00CA //InPout150V = ((read_adc(Sens150Vin)/10)+100);
                 ; 0000 00CB 
                 ; 0000 00CC Show_Value(InPout150V);
                +
0001b5 2da3     +MOV R26 , R3
0001b6 2db4     +MOV R27 , R4
                 	__GETW2R 3,4
0001b7 def5      	RCALL _Show_Value
                 ; 0000 00CD 
                 ; 0000 00CE if(InPout150V > 160)
0001b8 eae0      	LDI  R30,LOW(160)
0001b9 e0f0      	LDI  R31,HIGH(160)
0001ba 15e3      	CP   R30,R3
0001bb 05f4      	CPC  R31,R4
0001bc f410      	BRSH _0x43
                 ; 0000 00CF {
                 ; 0000 00D0 Motor_R_L_Off(Right);// Right Left OFF
0001bd e0a1      	LDI  R26,LOW(1)
0001be c00e      	RJMP _0x4B
                 ; 0000 00D1 // cheek motor curent
                 ; 0000 00D2 }
                 ; 0000 00D3 
                 ; 0000 00D4 else if((InPout150V < 140) && (InPout150V > 105))
                 _0x43:
0001bf e8ec      	LDI  R30,LOW(140)
0001c0 e0f0      	LDI  R31,HIGH(140)
0001c1 163e      	CP   R3,R30
0001c2 064f      	CPC  R4,R31
0001c3 f428      	BRSH _0x46
0001c4 e6e9      	LDI  R30,LOW(105)
0001c5 e0f0      	LDI  R31,HIGH(105)
0001c6 15e3      	CP   R30,R3
0001c7 05f4      	CPC  R31,R4
0001c8 f008      	BRLO _0x47
                 _0x46:
0001c9 c002      	RJMP _0x45
                 _0x47:
                 ; 0000 00D5 {
                 ; 0000 00D6 Motor_R_L_Off(Left);// Right Left OFF
0001ca e0a2      	LDI  R26,LOW(2)
0001cb c001      	RJMP _0x4B
                 ; 0000 00D7 }
                 ; 0000 00D8 
                 ; 0000 00D9 else
                 _0x45:
                 ; 0000 00DA {
                 ; 0000 00DB Motor_R_L_Off(OFF);// Right Left OFF
0001cc e0a0      	LDI  R26,LOW(0)
                 _0x4B:
0001cd deb9      	RCALL _Motor_R_L_Off
                 ; 0000 00DC }
                 ; 0000 00DD 
                 ; 0000 00DE }
0001ce cfe6      	RJMP _0x40
                 ; 0000 00DF }
                 _0x49:
0001cf cfff      	RJMP _0x49
                 ; .FEND
                 
                 	.DSEG
                 _AveInPout150V:
000300           	.BYTE 0x4
                 _DISPLAY:
000304           	.BYTE 0x4
                 _SegmentData:
000308           	.BYTE 0x34
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
0001d0 d015      	RCALL __DIVW21U
0001d1 01df      	MOVW R26,R30
0001d2 e0ea      	LDI  R30,LOW(10)
0001d3 e0f0      	LDI  R31,HIGH(10)
0001d4 d048      	RCALL __MODW21U
0001d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0001d6 e0f0      	LDI  R31,0
0001d7 5fe8      	SUBI R30,LOW(-_SegmentData)
0001d8 4ffc      	SBCI R31,HIGH(-_SegmentData)
0001d9 81e0      	LD   R30,Z
0001da b9eb      	OUT  0xB,R30
0001db 9483      	INC  R8
0001dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
0001dd 91a0 0300 	LDS  R26,_AveInPout150V
0001df 91b0 0301 	LDS  R27,_AveInPout150V+1
0001e1 9180 0302 	LDS  R24,_AveInPout150V+2
0001e3 9190 0303 	LDS  R25,_AveInPout150V+3
0001e5 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __DIVW21U:
0001e6 2400      	CLR  R0
0001e7 2411      	CLR  R1
0001e8 e190      	LDI  R25,16
                 __DIVW21U1:
0001e9 0faa      	LSL  R26
0001ea 1fbb      	ROL  R27
0001eb 1c00      	ROL  R0
0001ec 1c11      	ROL  R1
0001ed 1a0e      	SUB  R0,R30
0001ee 0a1f      	SBC  R1,R31
0001ef f418      	BRCC __DIVW21U2
0001f0 0e0e      	ADD  R0,R30
0001f1 1e1f      	ADC  R1,R31
0001f2 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001f3 60a1      	SBR  R26,1
                 __DIVW21U3:
0001f4 959a      	DEC  R25
0001f5 f799      	BRNE __DIVW21U1
0001f6 01fd      	MOVW R30,R26
0001f7 01d0      	MOVW R26,R0
0001f8 9508      	RET
                 
                 __DIVD21U:
0001f9 933f      	PUSH R19
0001fa 934f      	PUSH R20
0001fb 935f      	PUSH R21
0001fc 2400      	CLR  R0
0001fd 2411      	CLR  R1
0001fe 01a0      	MOVW R20,R0
0001ff e230      	LDI  R19,32
                 __DIVD21U1:
000200 0faa      	LSL  R26
000201 1fbb      	ROL  R27
000202 1f88      	ROL  R24
000203 1f99      	ROL  R25
000204 1c00      	ROL  R0
000205 1c11      	ROL  R1
000206 1f44      	ROL  R20
000207 1f55      	ROL  R21
000208 1a0e      	SUB  R0,R30
000209 0a1f      	SBC  R1,R31
00020a 0b46      	SBC  R20,R22
00020b 0b57      	SBC  R21,R23
00020c f428      	BRCC __DIVD21U2
00020d 0e0e      	ADD  R0,R30
00020e 1e1f      	ADC  R1,R31
00020f 1f46      	ADC  R20,R22
000210 1f57      	ADC  R21,R23
000211 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000212 60a1      	SBR  R26,1
                 __DIVD21U3:
000213 953a      	DEC  R19
000214 f759      	BRNE __DIVD21U1
000215 01fd      	MOVW R30,R26
000216 01bc      	MOVW R22,R24
000217 01d0      	MOVW R26,R0
000218 01ca      	MOVW R24,R20
000219 915f      	POP  R21
00021a 914f      	POP  R20
00021b 913f      	POP  R19
00021c 9508      	RET
                 
                 __MODW21U:
00021d dfc8      	RCALL __DIVW21U
00021e 01fd      	MOVW R30,R26
00021f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  17 r1 :  11 r2 :   0 r3 :   6 r4 :   6 r5 :   3 r6 :   3 r7 :   0 
r8 :   4 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  10 r17:  14 r18:   0 r19:   4 r20:   7 r21:   5 r22:  11 r23:   8 
r24:  16 r25:   9 r26:  33 r27:  10 r28:   2 r29:   1 r30: 149 r31:  35 
x  :   3 y  :  37 z  :   9 
Registers used: 26 out of 35 (74.3%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   7 add   :   3 
adiw  :   2 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   0 brmi  :   0 brne  :  12 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   5 cpi   :   5 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   1 jmp   :  27 ld    :  17 ldd   :   3 ldi   :  68 
lds   :  12 lpm   :   7 lsl   :   2 lsr   :   0 mov   :  12 movw  :  17 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   3 out   :  23 pop   :   3 push  :   3 rcall :  16 ret   :   9 
reti  :   1 rjmp  :  16 rol   :  10 ror   :   0 sbc   :   4 sbci  :   3 
sbi   :  11 sbic  :   0 sbis  :   0 sbiw  :   4 sbr   :   2 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  22 std   :   0 sts   :  45 sub   :   2 subi  :   3 swap  :   0 
tst   :   1 wdr   :   0 
Instructions used: 47 out of 116 (40.5%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000440   1016     72   1088   32768   3.3%
[.dseg] 0x000100 0x00033c      0     60     60    2048   2.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 6 warnings
